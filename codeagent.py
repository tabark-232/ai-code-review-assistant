# -*- coding: utf-8 -*-
"""codeagent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/tabark-232/15be22d4c446fb668709cbf2a0fac351/copy-of-codeagent.ipynb
"""

!pip install gradio

from openai import OpenAI

import gradio as gr

client = OpenAI(api_key="")

"""# **get_input_code**


"""

def get_input_code(input_type: str, value: str) -> str:
    if input_type == "text":
        return value
    elif input_type == "file":
        with open(value, 'r', encoding='utf-8') as file:
            return file.read()
    elif input_type == "url":
        import requests
        response = requests.get(value)
        return response.text
    return ""

"""# **detect_language**
"""

def detect_language(code: str) -> str:
    prompt = f"You are a language detector. What language is this code written in?\n\n{code}"
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content.strip()

"""## **analyze_code**"""

def analyze_code(code: str, language: str) -> str:
    prompt = f"Analyze this {language} code and find issues:\n\n```{language}\n{code}\n```"
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content.strip()

"""## **fix_code**"""

def fix_code(code: str, language: str) -> str:
    prompt = f"Fix this {language} code:\n\n```{language}\n{code}\n```"
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content.strip()

"""# **test_fixed_code**"""

def test_fixed_code(code: str, language: str) -> str:
    prompt = f"Test this {language} code logically:\n\n```{language}\n{code}\n```"
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content.strip()

"""# **run_pipeline_custom**"""

def run_pipeline_custom(input_type, code_text, code_url, code_file, do_detect, do_analyze, do_fix, do_test):
    if input_type == "text":
        input_value = code_text
    elif input_type == "url":
        input_value = code_url
    elif input_type == "file":
        input_value = code_file.read().decode("utf-8")
    else:
        return "‚ùå", "‚ùå", "‚ùå", "‚ùå"

    language = "‚ùå"
    analysis = ""
    fixed_code = ""
    test_result = ""

    if do_detect:
        language = detect_language(input_value)

    if do_analyze:
        analysis = analyze_code(input_value, language)

    if do_fix:
        fixed_code = fix_code(input_value, language)
    else:
        fixed_code = input_value

    if do_test:
        test_result = test_fixed_code(fixed_code, language)

    return language, analysis, fixed_code, test_result

"""# **gradio**"""

with gr.Blocks() as demo:
    gr.Markdown("### ‚öôÔ∏è Code Review with Optional Steps")

    with gr.Row():
        input_type = gr.Radio(["text", "file", "url"], label="Input Type", value="text")
    code_text = gr.Textbox(label="Code Text", visible=True)
    code_file = gr.File(label="Upload Code File", visible=False)
    code_url = gr.Textbox(label="Code URL", visible=False)

    input_type.change(
        fn=lambda t: {
            code_text: gr.update(visible=(t == "text")),
            code_file: gr.update(visible=(t == "file")),
            code_url: gr.update(visible=(t == "url")),
        },
        inputs=input_type,
        outputs=[code_text, code_file, code_url]
    )

    with gr.Row():
        do_detect = gr.Checkbox(label="üî§ Detect Language", value=True)
        do_analyze = gr.Checkbox(label="üìã Analyze Code", value=True)
        do_fix = gr.Checkbox(label="üõ† Fix Code", value=True)
        do_test = gr.Checkbox(label="üß™ Test Code", value=True)

    run_btn = gr.Button("üöÄ Run Selected Steps")

    lang_out = gr.Textbox(label="Language")
    analysis_out = gr.Textbox(label="Analysis")
    fixed_out = gr.Textbox(label="Fixed Code")
    test_out = gr.Textbox(label="Test Result")

    run_btn.click(
        fn=run_pipeline_custom,
        inputs=[input_type, code_text, code_url, code_file, do_detect, do_analyze, do_fix, do_test],
        outputs=[lang_out, analysis_out, fixed_out, test_out]
    )

demo.launch()
